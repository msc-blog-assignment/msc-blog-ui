scalar Upload

type Me {
  id: String!
  username: String!
  articles(userId: String): [Article!]!
  totalArticles: Count!
  comments: [Comment]!
  avatar: Avatar!
}

type Article {
  id: ID!
  createdAt: String!
  userId: String
  name: String
  content: String
  user: User!
  comments: [Comment]!
}

type User {
  id: ID!
  createdAt: String!
  username: String!
  email: String!
  articles(userId: String): [Article!]!
  totalArticles: Count!
  comments: [Comment]!
  avatar: Avatar!
}

type Comment {
  id: ID!
  createdAt: String!
  userId: String!
  articleId: String!
  comment: String!
  responses: [Response]!
  user: User
}

type Response {
  id: ID!
  createdAt: String!
  userId: String!
  articleId: String!
  commentId: String!
  response: String!,
  article: Article!
  user: User!
}

type Login {
  id: String!
  ttl: Int!
  created: String!
  userId: String!
  totalArticles: Count!
  me: Me!
  avatar: Avatar!
}

type Count {
  count: Int!
}

type Logout {
  ok: Boolean!
}

type Avatar {
  userId: String!
  avatar: String!
}

type File {
  id: ID!
  path: String!
  filename: String!
  mimetype: String!
  encoding: String!
}

type Mutation {
  signup(username: String! email: String! password: String!): User

  login (username: String! password: String!): Login

  logout: Logout

  # Articles
  createArticle (userId: String! name: String content: String): Article

  # Comments
  comment (userId: String! articleId: String! comment: String!): Comment

  respondToComment (userId: String! articleId: String! commentId: String! response: String!): Response

  # Avatar
  uploadAvatar(userId: String! file: Upload!, size: Int!): Avatar
}

type Query {

  # me
  me: Me!

  # User
  user(id: String): User!
  users: [User]!

  # Article
  article(id: String!): Article!
  articles: [Article]!
  myArticles(id: String!): [Article]!

  # Avatar
  avatar(userId: String!): Avatar!
}
